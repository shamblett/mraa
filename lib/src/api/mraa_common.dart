/*
 * Package : mraa
 * Author : S. Hamblett <steve.hamblett@linux.com>
 * Date   : 03/10/2019
 * Copyright :  S.Hamblett
 */

part of mraa;

/// C Function type typedefs
typedef returnStringNoParametersFunc = ffi.Pointer<Utf8> Function();
typedef returnStringIntParametersFunc = ffi.Pointer<Utf8> Function(ffi.Int32);
typedef returnIntNoParametersFunc = ffi.Int32 Function();
typedef returnIntIntParametersFunc = ffi.Int32 Function(ffi.Int32);
typedef returnIntStringParametersFunc = ffi.Int32 Function(ffi.Pointer<Utf8>);
typedef returnInt2IntParametersFunc = ffi.Int32 Function(ffi.Int32, ffi.Int32);

/// Dart Function typedefs
typedef MraaVersionType = ffi.Pointer<Utf8> Function();
typedef MraaPlatformVersionType = ffi.Pointer<Utf8> Function(int);
typedef MraaInitialiseType = int Function();
typedef MraaPlatformNameType = ffi.Pointer<Utf8> Function();
typedef MraaPlatformTypeType = int Function();
typedef MraaInitJsonPlatformType = int Function(ffi.Pointer<Utf8>);
typedef MraaSetLogLevelType = int Function(int);
typedef MraaPinmodeTestType = int Function(int, int);
typedef MraaADCRawBitsType = int Function();
typedef MraaPlatformAdcRawBitsType = int Function(int);

/// The Common MRAA Api
class _MraaCommon {
  _MraaCommon(this._lib) {
    _setUpPointers();
    _setUpFunctions();
  }

  /// The MRAA library
  ffi.DynamicLibrary _lib;

  /// C Pointers
  ffi.Pointer<ffi.NativeFunction<returnStringNoParametersFunc>> _versionPointer;
  ffi.Pointer<ffi.NativeFunction<returnIntNoParametersFunc>> _initialisePointer;
  ffi.Pointer<ffi.NativeFunction<returnStringNoParametersFunc>>
      _platformNamePointer;
  ffi.Pointer<ffi.NativeFunction<returnStringIntParametersFunc>>
      _platformVersionPointer;
  ffi.Pointer<ffi.NativeFunction<returnIntNoParametersFunc>>
      _platformTypePointer;
  ffi.Pointer<ffi.NativeFunction<returnIntStringParametersFunc>>
      _initJsonPlatformPointer;
  ffi.Pointer<ffi.NativeFunction<returnIntIntParametersFunc>>
      _setLogLevelPointer;
  ffi.Pointer<ffi.NativeFunction<returnInt2IntParametersFunc>>
      _pinmodeTestPointer;
  ffi.Pointer<ffi.NativeFunction<returnIntNoParametersFunc>> _adcRawBitsPointer;
  ffi.Pointer<ffi.NativeFunction<returnIntIntParametersFunc>>
      _platformAdcRawBitsPointer;

  /// Dart Functions
  dynamic _versionFunc;
  dynamic _initFunc;
  dynamic _platformNameFunc;
  dynamic _platformVersionFunc;
  dynamic _platformTypeFunc;
  dynamic _initJsonPlatformFunc;
  dynamic _setLogLevelFunc;
  dynamic _pinModeTestFunc;
  dynamic _adcRawBitsFunc;
  dynamic _platformAdcRawBitsFunc;

  /// Version - mraa_get_version
  /// Get the version string of mraa autogenerated from git tag
  /// The version returned may not be what is expected however it is a reliable number
  /// associated with the git tag closest to that version at build time.
  String version() {
    final dynamic versionCharString = _versionFunc();
    return Utf8.fromUtf8(versionCharString);
  }

  /// Initialise - mraa_init
  /// Initialise MRAA
  /// Detects running platform and attempts to use included pinmap, this is run on module/library
  /// init/load but is handy to rerun to check board initialised correctly.
  /// MRAA_SUCCESS indicates correct initialisation.
  MraaReturnCodes initialise() => returnCodes.fromInt(_initFunc());

  /// Platform name - mraa_get_platform_name
  /// Return the Platform's Name, If no platform detected return NULL
  String platformName() {
    final dynamic platformNameCharString = _platformNameFunc();
    return Utf8.fromUtf8(platformNameCharString);
  }

  /// Platform version - mraa_get_platform_version
  /// Return the platform's versioning info, the information given depends per platform and can be NULL.
  /// platform_offset has to be given. 0 for main platform, 1 for sub platform.
  String platformVersion(int platformOffset) {
    final dynamic platformVersionCharString =
        _platformVersionFunc(platformOffset);
    return Utf8.fromUtf8(platformVersionCharString);
  }

  /// Platform type - mraa_get_platform_type
  /// Get platform type, board must be initialised.
  MraaPlatformType platformType() => platformTypes.fromInt(_platformTypeFunc());

  /// Initialise JSON platform - mraa_init_json_platform
  /// Instantiate an unknown board using a json file
  MraaReturnCodes initialiseJsonPlatform(String path) =>
      returnCodes.fromInt(_initJsonPlatformFunc(Utf8.toUtf8(path)));

  /// Set the log level - mraa_set_log_level
  /// Sets the log level to use from 0-7 where 7 is very verbose.
  /// These are the syslog log levels, see syslog(3) for more information on the levels.
  MraaReturnCodes setLogLevel(int level) =>
      returnCodes.fromInt(_setLogLevelFunc(level));

  /// Pin mode test - mraa_pin_mode_test
  /// Checks if a pin is able to use the passed in mode.
  /// True if the mode is supported
  bool pinmodeTest(int pin, MraaPinmodes mode) {
    final int ret = _pinModeTestFunc(pin, pinmodes.asInt(mode));
    return ret == 1;
  }

  /// ADC raw bits - mraa_adc_raw_bits
  /// Check the board's bit size when reading the value
  /// 0 if no ADC
  int adcRawBits() => _adcRawBitsFunc();

  /// Platform ADC eaw bits - mraa_platform_adc_raw_bits
  /// Check the board's bit size when reading the value
  /// Specified platform offset; 0 for main platform, 1 for sub platform
  /// 0 if no ADC
  int platformAdcRawBits(int platformOffset) =>
      _platformAdcRawBitsFunc(platformOffset);

  void _setUpPointers() {
    _versionPointer =
        _lib.lookup<ffi.NativeFunction<returnStringNoParametersFunc>>(
            'mraa_get_version');
    _initialisePointer =
        _lib.lookup<ffi.NativeFunction<returnIntNoParametersFunc>>('mraa_init');
    _platformNamePointer =
        _lib.lookup<ffi.NativeFunction<returnStringNoParametersFunc>>(
            'mraa_get_platform_name');
    _platformVersionPointer =
        _lib.lookup<ffi.NativeFunction<returnStringIntParametersFunc>>(
            'mraa_get_platform_version');
    _platformTypePointer =
        _lib.lookup<ffi.NativeFunction<returnIntNoParametersFunc>>(
            'mraa_get_platform_type');
    _initJsonPlatformPointer =
        _lib.lookup<ffi.NativeFunction<returnIntStringParametersFunc>>(
            'mraa_init_json_platform');
    _setLogLevelPointer =
        _lib.lookup<ffi.NativeFunction<returnIntIntParametersFunc>>(
            'mraa_set_log_level');
    _pinmodeTestPointer =
        _lib.lookup<ffi.NativeFunction<returnInt2IntParametersFunc>>(
            'mraa_pin_mode_test');
    _adcRawBitsPointer =
        _lib.lookup<ffi.NativeFunction<returnIntNoParametersFunc>>(
            'mraa_adc_raw_bits');
    _platformAdcRawBitsPointer =
        _lib.lookup<ffi.NativeFunction<returnIntIntParametersFunc>>(
            'mraa_get_platform_adc_raw_bits');
  }

  void _setUpFunctions() {
    _versionFunc = _versionPointer.asFunction<MraaVersionType>();
    _initFunc = _initialisePointer.asFunction<MraaInitialiseType>();
    _platformNameFunc = _platformNamePointer.asFunction<MraaPlatformNameType>();
    _platformVersionFunc =
        _platformVersionPointer.asFunction<MraaPlatformVersionType>();
    _platformTypeFunc = _platformTypePointer.asFunction<MraaPlatformTypeType>();
    _initJsonPlatformFunc =
        _initJsonPlatformPointer.asFunction<MraaInitJsonPlatformType>();
    _setLogLevelFunc = _setLogLevelPointer.asFunction<MraaSetLogLevelType>();
    _pinModeTestFunc = _pinmodeTestPointer.asFunction<MraaPinmodeTestType>();
    _adcRawBitsFunc = _adcRawBitsPointer.asFunction<MraaADCRawBitsType>();
    _platformAdcRawBitsFunc =
        _platformAdcRawBitsPointer.asFunction<MraaPlatformAdcRawBitsType>();
  }
}
